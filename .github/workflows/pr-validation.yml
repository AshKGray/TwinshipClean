name: PR Validation

on:
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache TypeScript
        uses: actions/cache@v4
        with:
          path: .tscache
          key: ${{ runner.os }}-tsc-${{ hashFiles('**/tsconfig.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-tsc-${{ hashFiles('**/tsconfig.json') }}-
            ${{ runner.os }}-tsc-

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Run tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Security audit
        run: npm audit --audit-level high

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Bundle analysis (Node 20.x only)
        if: matrix.node-version == '20.x'
        run: |
          echo "Bundle size analysis would go here"
          # Future: Add bundle size analysis for React Native/Expo

  comment-pr:
    runs-on: ubuntu-latest
    needs: validate
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR Results
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Validation Results')
            );
            
            const success = '${{ needs.validate.result }}' === 'success';
            const body = `## PR Validation Results
            
            ${success ? '✅' : '❌'} **Validation ${success ? 'Passed' : 'Failed'}**
            
            - Linting: ${success ? '✅ Passed' : '❌ Check logs'}
            - Type Checking: ${success ? '✅ Passed' : '❌ Check logs'}  
            - Tests: ${success ? '✅ Passed' : '❌ Check logs'}
            - Security Audit: ${success ? '✅ Passed' : '❌ Check logs'}
            
            View full results in the [Actions tab](${context.payload.pull_request.html_url}/checks).
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }