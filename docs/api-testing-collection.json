{
  "info": {
    "name": "Twinship API Testing Collection",
    "description": "Comprehensive Postman collection for testing Twinship API endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api/v1",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "twinPairId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "}",
                  "",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response).to.have.property('tokens');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jordan.test@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"name\": \"Jordan Test\",\n  \"age\": 25,\n  \"gender\": \"female\",\n  \"birthDate\": \"1998-06-15\",\n  \"twinType\": \"identical\",\n  \"accentColor\": \"neon-purple\",\n  \"placeOfBirth\": \"San Francisco, CA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "}",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.tokens).to.have.property('accessToken');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jordan.test@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          }
        },
        {
          "name": "Logout",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.profile).to.have.property('id');",
                  "    pm.expect(response.profile).to.have.property('name');",
                  "    pm.expect(response.profile).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            }
          }
        },
        {
          "name": "Update User Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jordan Updated\",\n  \"age\": 26,\n  \"accentColor\": \"neon-blue\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            }
          }
        },
        {
          "name": "Get User Settings",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/settings",
              "host": ["{{baseUrl}}"],
              "path": ["users", "settings"]
            }
          }
        }
      ]
    },
    {
      "name": "Twin Pairing",
      "item": [
        {
          "name": "Create Twin Invitation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Invitation created', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.invitation).to.have.property('token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"alex.twin@example.com\",\n  \"method\": \"email\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/twins/invite",
              "host": ["{{baseUrl}}"],
              "path": ["twins", "invite"]
            }
          }
        },
        {
          "name": "Pair with Twin (using TEST code)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('twinPairId', response.pairId);",
                  "}",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pairing successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response).to.have.property('twinProfile');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"TEST\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/twins/pair",
              "host": ["{{baseUrl}}"],
              "path": ["twins", "pair"]
            }
          }
        },
        {
          "name": "Get Invitation Analytics",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/twins/invitations",
              "host": ["{{baseUrl}}"],
              "path": ["twins", "invitations"]
            }
          }
        }
      ]
    },
    {
      "name": "Messaging",
      "item": [
        {
          "name": "Send Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Message sent successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.have.property('id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Hey twin! This is a test message from the API collection.\",\n  \"type\": \"text\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messages",
              "host": ["{{baseUrl}}"],
              "path": ["messages"]
            }
          }
        },
        {
          "name": "Get Messages",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response).to.have.property('messages');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/messages?limit=20&page=1",
              "host": ["{{baseUrl}}"],
              "path": ["messages"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "page",
                  "value": "1"
                }
              ]
            }
          }
        },
        {
          "name": "Add Message Reaction",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"emoji\": \"❤️\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messages/msg_123456789/reactions",
              "host": ["{{baseUrl}}"],
              "path": ["messages", "msg_123456789", "reactions"]
            }
          }
        },
        {
          "name": "Mark Messages as Read",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"messageIds\": [\"msg_123456789\", \"msg_987654321\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messages/bulk-read",
              "host": ["{{baseUrl}}"],
              "path": ["messages", "bulk-read"]
            }
          }
        }
      ]
    },
    {
      "name": "Assessments",
      "item": [
        {
          "name": "Start Assessment Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('assessmentSessionId', response.session.id);",
                  "}",
                  "",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Assessment session created', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.session).to.have.property('id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assessments",
              "host": ["{{baseUrl}}"],
              "path": ["assessments"]
            }
          }
        },
        {
          "name": "Submit Assessment Responses",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"responses\": [\n    {\n      \"itemId\": \"IF_001\",\n      \"value\": 6,\n      \"timestamp\": \"2024-01-15T10:30:00Z\"\n    },\n    {\n      \"itemId\": \"IF_002\", \n      \"value\": 5,\n      \"timestamp\": \"2024-01-15T10:30:30Z\"\n    }\n  ],\n  \"isComplete\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assessments/{{assessmentSessionId}}/responses",
              "host": ["{{baseUrl}}"],
              "path": ["assessments", "{{assessmentSessionId}}", "responses"]
            }
          }
        },
        {
          "name": "Get Assessment Sessions",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assessments?status=completed&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["assessments"],
              "query": [
                {
                  "key": "status",
                  "value": "completed"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Assessment Results",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assessments/{{assessmentSessionId}}/results",
              "host": ["{{baseUrl}}"],
              "path": ["assessments", "{{assessmentSessionId}}", "results"]
            }
          }
        }
      ]
    },
    {
      "name": "Research",
      "item": [
        {
          "name": "Get Available Studies",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Studies retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response).to.have.property('studies');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/research/studies",
              "host": ["{{baseUrl}}"],
              "path": ["research", "studies"]
            }
          }
        },
        {
          "name": "Record Research Consent",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"consentItems\": {\n    \"dataCollection\": true,\n    \"dataSharing\": true,\n    \"longTermStorage\": false,\n    \"contactForFollowup\": true\n  },\n  \"ipAddress\": \"192.168.1.1\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/research/studies/twin-sync-2024/consent",
              "host": ["{{baseUrl}}"],
              "path": ["research", "studies", "twin-sync-2024", "consent"]
            }
          }
        },
        {
          "name": "Get Research Participation",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/research/participation",
              "host": ["{{baseUrl}}"],
              "path": ["research", "participation"]
            }
          }
        },
        {
          "name": "Submit Telemetry Data",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventType\": \"app_usage\",\n  \"data\": {\n    \"screen\": \"TwinTalk\",\n    \"action\": \"message_sent\",\n    \"duration\": 45000\n  },\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"sessionId\": \"session_123456789\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/research/telemetry",
              "host": ["{{baseUrl}}"],
              "path": ["research", "telemetry"]
            }
          }
        }
      ]
    },
    {
      "name": "Subscriptions",
      "item": [
        {
          "name": "Get Subscription Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Subscription status retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response).to.have.property('subscription');",
                  "    pm.expect(response).to.have.property('availablePlans');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/subscriptions",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions"]
            }
          }
        },
        {
          "name": "Process Subscription Purchase",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"twinship_monthly\",\n  \"purchaseToken\": \"mock_purchase_token_123456\",\n  \"platform\": \"ios\",\n  \"receiptData\": \"base64_encoded_receipt_data\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/purchase",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions", "purchase"]
            }
          }
        }
      ]
    },
    {
      "name": "WebSocket & System",
      "item": [
        {
          "name": "Get WebSocket Connection Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('WebSocket info provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response).to.have.property('wsUrl');",
                  "    pm.expect(response).to.have.property('token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ws/info",
              "host": ["{{baseUrl}}"],
              "path": ["ws", "info"]
            }
          }
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('API is healthy', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('healthy');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set dynamic timestamp for requests",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global response time test",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "// Global content type test for successful responses",
          "if (pm.response.code < 400) {",
          "    pm.test('Content-Type is application/json', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}"
        ]
      }
    }
  ]
}